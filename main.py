import streamlit as st
import uuid
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import time
from gspread.exceptions import APIError
import base64

# âœ… Google Sheets setup
@st.cache_resource
def get_questionnaire_worksheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds_dict = st.secrets["gcp_service_account"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(creds)

    retries = 5
    for attempt in range(retries):
        try:
            sheet = client.open("Survey Responses").worksheet("Sheet1")
            return sheet
        except APIError as e:
            if "Visibility check was unavailable" in str(e):
                st.warning(f"Google API 503 error, retrying... ({attempt+1}/{retries})")
                time.sleep(3)
            else:
                raise e

    st.error("Failed after multiple retries.")
    st.stop()

# âœ… Load PIS file for download
@st.cache_resource
def load_pis_file():
    with open("PISPCF.pdf", "rb") as f:
        return f.read()

pis_data = load_pis_file()

# Generate base64-encoded PDF to embed as a hyperlink
b64_pdf = base64.b64encode(pis_data).decode('utf-8')
pdf_link = f'<a href="data:application/pdf;base64,{b64_pdf}" download="PISPCF.pdf">Participant Information Sheet (PDF)</a>'


# âœ… Generate unique ID
def generate_unique_id():
    timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
    random_part = uuid.uuid4().hex[:6]  # 6 hex characters â†’ ~16 million combinations
    return f"{timestamp}_{random_part}"

st.set_page_config(page_title="Participant Information & Consent")

st.image("Sheffield-Hallam-University.png", width=250)
st.title("Welcome")

st.image("static/headerq.png", use_container_width=True)

# âœ… Project Intro (exactly as SHU guideline requests)
st.markdown(f"""
You are being invited to participate in a research study titled **The Search of Advanced AI-Powered Service Robots for Amusement Parks.** This study is being conducted by **Cherry San** from the Department of Computing at Sheffield Hallam University.

---

### Key Information

- **Purpose of Study:**  
To explore how AI-powered service robots can assist amusement park visitors through personalized tour planning and adaptive navigation.

- **What You Will Be Asked To Do:**  
Complete a short online questionnaire regarding your preferences and experience in amusement parks. You will then be shown a personalized tour plan generated by our system.

- **Duration:**  
Approximately 5 minutes to complete the questionnaire.

- **Compensation:**  
There is no payment associated with participation.

---

### Participant Information Sheet

If you are interested in taking part, please download a copy of the participant
information sheet here {pdf_link} and retain this for your records before starting the questionnaire.


---

If you have any questions, please contact **Cherry San** at:  
ðŸ“§ [c3065323@hallam.shu.ac.uk](mailto:c3065323@hallam.shu.ac.uk)

---

- Participation is **entirely voluntary**.
- You may **withdraw anytime** before submission by closing the web browser.
- You may **skip any question**.  
- After submission, your data is collected anonymously and cannot be withdrawn.

---

""", unsafe_allow_html=True)



# âœ… Consent via Start Button
st.markdown("### Consent Confirmation")

consent_checkbox = st.checkbox("I have read the Participant Information Sheet and Consent to Participate.")
start_clicked = st.button("Start Questionnaire")

if start_clicked:
    if not consent_checkbox:
        st.warning("Please confirm your consent before starting.")
    else:
  
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        unique_id = generate_unique_id()

        st.session_state["consent_submitted"] = True
        st.session_state["unique_id"] = unique_id
        st.session_state["consent_agreed"] = True

        # âœ… Save timestamp & ID into Google Sheet as first row
        row = [timestamp, unique_id] + [""] * 16  # total 18 columns
        get_questionnaire_worksheet().append_row(row)

        st.success("Consent recorded. Loading questionnaire...")
        time.sleep(0.7)
        st.switch_page("pages/1_questionnaire.py")
